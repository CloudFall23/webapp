name: Build AMI after PR is merged

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: "Create env file"
        run: |
          touch .env
          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
          echo PGUSER=${{ secrets.PGUSER }} >> .env
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
          echo PGPORT=${{ secrets.PGPORT }} >> .env
          echo PGHOST=${{ secrets.PGHOST }} >> .env
          echo CSVPATH=$"opt/users.csv" >> .env
          echo "cat .env"
          cat .env
          echo "ls -a ."
          ls -a .
          echo "ls -a ${{ github.workspace }}"
          ls -a ${{ github.workspace }}

      - name: Step 3 - zip all the webApp files
        run: |
          zip -r webApp.zip ./
          pwd ./webApp

      - name: Install Packer
        run: |
          PACKER_VERSION="1.9.4"
          wget https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip packer_${PACKER_VERSION}_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Initialize Packer
        run: packer init webApp.pkr.hcl

      - name: Build AMI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: packer build -var "aws_region=${AWS_REGION}" webApp.pkr.hcl

      - name: Configure AWS credentials for demo account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1
      
      - name: Update AWS Launch Template Config and Refresh Instances
        run: |

          ASG_NAME="csye6225_asg"
          LAUNCH_CONFIG="webapp-launch-template"

          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)

          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')

          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version='$Latest'

          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME

          while true; do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              echo "Instance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              echo "Instance refresh failed!"
              exit 1
            fi
            sleep 10
          done